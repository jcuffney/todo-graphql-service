scalar Date

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type User implements Node {
  id: ID!
  firstName: String
  lastName: String
  email: String!
  username: String
  createdAt: Date!
  updatedAt: Date
  deletedAt: Date

  tasks: TaskConnection!
}

type Task implements Node {
  id: ID!
  title: String!
  description: String
  createdAt: Date!
  updatedAt: Date
  deletedAt: Date
  createdBy: Date!
  updatedBy: Date
  deletedBy: Date
}

type TaskConnection {
  edges: [TaskEdge]
  pageInfo: PageInfo!
}

type TaskEdge {
  cursor: String!
  node: Task!
}

input SearchInput {
  query: String
  first: Int! = 10
  after: String
}

type NodeConnection {
  edges: [NodeEdge]
  pageInfo: PageInfo!
}

type NodeEdge {
  cursor: String!
  node: Node!
}

type Query {
  health: String
  whoami: User
  node(id: ID!): Node
  search(input: SearchInput!): NodeConnection!
}

type Subscription {
  numberIncremented: Int
}